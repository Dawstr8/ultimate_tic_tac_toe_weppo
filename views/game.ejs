<!-- views/game.ejs -->
<html>
    <meta charset="utf-8" />

    <head>
        <link rel="stylesheet" href="/common.css" type="text/css">
        <link rel="stylesheet" href="/game.css" type="text/css">
        <script src="/socket.io/socket.io.js"></script>
        <script>
            window.addEventListener('load', function () {
                (function () {
                    window.onpageshow = function(event) {
                        if (event.persisted) {
                            window.location.reload();
                        }
                    };
                })();

                var socket = io();

                // helper functions for html changes
                const playerColorClass = (player) => {
                    return player === 'X' ? 'red' : 'blue';
                }

                const updateTurnElement = (turn) => {
                    const turnElement = document.getElementById('gameState__turn');
                    turnElement.classList.remove('off');
                    if (turn !== yourPlayerNr) {
                        turnElement.classList.add('off');
                    }
                   
                }

                const resetTurnElement = () => {
                    const turnElement = document.getElementById('gameState__turn');
                    turnElement.classList.remove('off');
                    turnElement.classList.add('off');
                };

                const updateWinnerElement = (winner) => {
                    const winnerElement = document.getElementById('gameState__winner');
                    winnerElement.classList.remove('off');
                    if (winner === null){
                        winnerElement.classList.add('off');
                    }
                    winnerElement.innerHTML = winner ? (winner === yourPlayerNr ? 'You have won' : 'You have lost') : 'Draw';
                }

                const updatePlayersElement = (players) => {
                    const waitingForPlayer = players[0] === null ? 'red' : (players[1] === null ? 'blue' : '');
                    var playersElement = document.getElementById("players");
                    playersElement.innerHTML = waitingForPlayer === '' ? players[0] + " vs " + players[1] : "Waiting for " + waitingForPlayer + " player...";
                }

                const updateField = (fieldId, player) => {
                    const field = document.getElementById(fieldId);
                    field.innerHTML = player;
                    field.classList.remove('board__field--red');
                    field.classList.remove('board__field--blue');
                    if (player) {
                        field.classList.add('board__field--' + playerColorClass(player));
                    }
                    
                }

                const setSmallBoardIfFinished = (smallBoardId, bigBoard) => {
                    if (bigBoard[smallBoardId]) {
                        const smallBoard = document.getElementById(smallBoardId);
                        var bigBoardField = bigBoard[smallBoardId];
                        var boardClass = playerColorClass(bigBoardField);
                        smallBoard.classList.add('board__smallBoard--ended');
                        smallBoard.classList.add(boardClass);
                        smallBoard.innerHTML = bigBoardField;
                    }
                }

                const setSmallBoardPlayableAfterReset = (smallBoardId) => {
                    const smallBoard = document.getElementById(smallBoardId);
                    smallBoard.classList.remove('board__smallBoard--ended');
                    smallBoard.classList.remove('red');
                    smallBoard.classList.remove('blue');
                    smallBoard.innerHTML = '';
                    for (let i = 0; i < 9; i++) {
                        smallBoard.innerHTML += '<div id="' + smallBoardId.toString() + i.toString() + '" class="board__field"></div>';
                    };
                }

                const updateSmallBoardsPossibleMoves = (bigBoard, possibleBoards, turn) => {
                    for (let i = 0; i < possibleBoards.length; i++) {
                        const smallBoard = document.getElementById(i);
                        if (bigBoard) {
                            smallBoard.classList.remove("board__smallBoard--red");
                            smallBoard.classList.remove("board__smallBoard--blue");
                            if (possibleBoards[i]) {
                                smallBoard.classList.add('board__smallBoard--' + playerColorClass(turn));  
                            }
                        }     
                    }
                }

                const addListenersToFieldsButtons = () => {
                    var fieldGroup = document.getElementsByClassName('board__field');
                    for (var i = 0; i < fieldGroup.length; i++) {
                        fieldGroup[i].addEventListener('click', function (event) {
                            var fieldId = this.getAttribute('id');
                            socket.emit('make move', fieldId);
                        });
                    }
                };

                // click listeners
                const leaveRoomButton = document.getElementById('leaveRoomButton');
                leaveRoomButton.addEventListener('click', function (event) {
                    socket.emit('leave room');
                });

                const resetGameButton = document.getElementById('resetGameButton');
                resetGameButton.addEventListener('click', function (event) {
                    socket.emit('reset game');
                });

                addListenersToFieldsButtons();

                // socket listeners
                socket.on('move made', function(fieldId, player, game) {
                    updateField(fieldId, player);

                    const bigBoard = game.bigBoard;
                    setSmallBoardIfFinished(fieldId[0], bigBoard);
                    
                    const possibleBoards = game.possibleBoards;
                    const turn = game.turn;
                    updateSmallBoardsPossibleMoves(bigBoard, possibleBoards, turn); 
                    
                    if (game.winner !== null) {
                        resetTurnElement();
                    } else {
                        updateTurnElement(turn);
                    }
                    updateWinnerElement(game.winner);
                });

                socket.on('player left room', updatePlayersElement);
                socket.on('player joined room', updatePlayersElement);
                socket.on('game reset', function(game) {
                    const bigBoard = game.bigBoard;
                    const turn = game.turn;
                    const possibleBoards = game.possibleBoards;
                    for (let i = 0; i < 9; i++) {
                        setSmallBoardPlayableAfterReset(i);
                        updateSmallBoardsPossibleMoves(bigBoard, possibleBoards, turn);
                    }

                    addListenersToFieldsButtons();
                    updateTurnElement(turn);
                    updateWinnerElement(game.winner);
                });

                socket.on('redirect', function(destination) {
                    window.location.href = destination;
                });
            });
        </script>
    </head>

    <body>
        <script>
            var yourPlayerNr = '<%- JSON.parse(JSON.stringify(locals.yourPlayerNr)) %>'; 
        </script>
        <div class="center gameState">
            <% const waitingForPlayer = locals.players[0] === null ? 'red' : (locals.players[1] === null ? 'blue' : '') %>
            <div id="players" class="gameState__players"> <%= waitingForPlayer === '' ? locals.players[0] + " vs " + locals.players[1] : "Waiting for " + waitingForPlayer + " player..." %></div>
            <div id="gameState__turn" class="gameState__turn <%= locals.game.turn !== locals.yourPlayerNr ? 'off' : '' %>">Your turn</div>
            <div id="board" class="board">
                <% for (let i = 0; i < 9; i++) { %>
                    <% var isBoardPossible = locals.game.possibleBoards[i]; %>
                    <% var turn = locals.game.turn %>
                    <% var bigBoard = locals.game.bigBoard %>
                    <% if (bigBoard[i]) { %>
                        <% var boardClass = (bigBoard[i] === 'X' ? 'red' : 'blue'); %>
                        <div id="<%=i%>" class="board__smallBoard board__smallBoard--ended <%= boardClass %>"><%= bigBoard[i] %></div>
                    <% } else { %>
                        <% var boardClass = isBoardPossible ? ('board__smallBoard--' + (turn === 'X' ? 'red' : 'blue')) : ''; %> 
                        <div id="<%=i%>" class="board__smallBoard <%= boardClass %>">
                        <% for (let j = 0; j < 9; j++) { %>
                            <% var field = game.smallBoards[i][j]; %>
                            <% var fieldColor = field ? (field === 'X' ? 'red' : 'blue') : ''; %>
                            <div id="<%=i%><%=j%>" class="board__field <%= fieldColor %>"> <%= field %> </div>
                        <% } %>
                        </div>
                    <% } %>
                <% } %>
            </div>
            <div id="gameState__winner" class="gameState__winner <%= locals.game.winner === null ? 'off' : '' %>"><%= locals.game.winner ? (locals.game.winner === yourPlayerNr ? 'You have won' : 'You have lost') : 'Draw' %></div>
            <button id="resetGameButton">Reset game</button>
            <button id="leaveRoomButton">Leave room</button>
        </div>
    </body>
</html>